{"version":3,"sources":["features/ChatSlice.js","Firebase.js","SidebarChat.js","features/UserSlice.js","Sidebar.js","Message.js","Chat.js","IMessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatSlice","createSlice","name","initialState","chatId","chatName","reducers","setChat","state","action","payload","actions","selectChatId","chat","selectChatName","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","toLocaleString","userSlice","user","login","logout","selectUser","Sidebar","useSelector","chats","setChats","signOut","placeholder","IconButton","variant","prompt","add","Message","forwardRef","ref","contents","uid","email","displayName","Chat","input","setInput","setMessage","onChange","e","target","value","preventDefault","FieldValue","serverTimestamp","IMessage","Login","alt","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48a2360c.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const ChatSlice = createSlice({\r\n    name:'chat',\r\n    initialState: {\r\n        chatId:null,\r\n        chatName:null,\r\n    },\r\n    reducers:{\r\n        setChat: (state,action)=>{\r\n            state.chatId =action.payload.chatId;\r\n            state.chatName =action.payload.chatName;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {setChat} = ChatSlice.actions;\r\n\r\nexport const selectChatId = (state) => state.chat.chatId;\r\nexport const selectChatName = (state) => state.chat.chatName;\r\n\r\nexport default ChatSlice.reducer;","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBatyYnRTwtTgsWNjsCVOAWKDb2ykfd-c0\",\r\n    authDomain: \"imessage-clone-17fa7.firebaseapp.com\",\r\n    databaseURL: \"https://imessage-clone-17fa7.firebaseio.com/\",\r\n    projectId: \"imessage-clone-17fa7\",\r\n    storageBucket: \"imessage-clone-17fa7.appspot.com\",\r\n    // messagingSenderId: \"600178829782\",\r\n    // appId: \"1:642767734112:web:96f3a48a1a914219574a05\",\r\n    // measurementId: \"G-Z8RNQQE73Q\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import { Avatar } from '@material-ui/core';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setChat} from './features/ChatSlice'\r\nimport React,{useState, useEffect} from 'react';\r\nimport db from './Firebase';\r\nimport './sidebarChat.css';\r\nimport * as timeago from 'timeago.js';\r\n\r\nfunction SidebarChat({id,chatName}) {\r\n    const dispatch = useDispatch()\r\n    const [chatInfo, setChatInfo] =useState([]);\r\n    useEffect(()=>{\r\n        db.collection('chats')\r\n        .doc(id)\r\n        .collection('message')\r\n        .orderBy('timestamp','desc')\r\n        .onSnapshot(snapshot=> setChatInfo(snapshot.docs.map(doc=>doc.data())))\r\n    },[id])\r\n    return (\r\n        <div onClick={()=>\r\n            dispatch(\r\n                setChat({\r\n                    chatId:id,\r\n                    chatName:chatName\r\n                })\r\n            )\r\n        } className=\"sidebarChat\">\r\n            <Avatar src={chatInfo[0]?.photo} className=\"sidebarChat_avatar\" />\r\n            <div className=\"sidebarChat_info\">\r\n                <h3>{chatName}</h3>\r\n                <p>{chatInfo[0]?.message}</p>\r\n                <small>{timeago.format(new Date(chatInfo[0]?.timestamp?.toDate()).toLocaleString()) }</small>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n    name:'user',\r\n    initialState: {\r\n        user:null,\r\n    },\r\n    reducers:{\r\n        login: (state,action)=>{\r\n            state.user =action.payload;\r\n        },\r\n        logout: (state)=>{\r\n            state.user =null;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {login, logout} = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './Sidebar.css';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/UserSlice\";\r\nimport db, { auth } from \"./Firebase\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"chats\").onSnapshot((snapshot) =>\r\n      setChats(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const addChat = () => {\r\n    const chatName = prompt(\"Please enter a chat name\");\r\n    if (chatName) {\r\n      db.collection(\"chats\").add({\r\n        chatName: chatName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar\r\n          onClick={() => auth.signOut()}\r\n          src={user.photo}\r\n          className=\"sidebar_avatar\"\r\n        />\r\n        <div className=\"sidebar_input\">\r\n          <SearchIcon />\r\n          <input placeholder=\"Search\" />\r\n        </div>\r\n\r\n        <IconButton variant=\"outlined\" className=\"sidebar_inputButton\" onClick={addChat}>\r\n          <RateReviewOutlinedIcon  />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"sidebar_chats\">\r\n        {chats.map(({ id, data: { chatName } }) => (\r\n          <SidebarChat key={id} id={id} chatName={chatName} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n\r\n\r\n\r\n\r\n","import React, { forwardRef } from 'react'\r\nimport {Avatar} from '@material-ui/core';\r\nimport './Message.css';\r\nimport { useSelector } from 'react-redux';\r\nimport {selectUser} from './features/UserSlice'\r\n \r\nconst Message= forwardRef(({\r\n    id,contents:{ uid, message, email, photo, timestamp, displayName}\r\n},ref)=> {\r\n    const user = useSelector(selectUser)\r\n    return (\r\n        <div ref={ref} className={`message ${user.email ===email && \"message_sender\"}`}>\r\n            <Avatar className=\"message_photo\" src={photo} />\r\n            <p>{message}</p> \r\n            <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>           \r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import React, { useState,useEffect } from 'react'\r\nimport './Chat.css'\r\nimport {\r\n    IconButton,\r\n} from '@material-ui/core';\r\nimport MicNoneIcon from '@material-ui/icons/MicNone';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChatId, selectChatName } from './features/ChatSlice'\r\nimport db from './Firebase';\r\nimport firebase from 'firebase';\r\nimport {selectUser} from './features/UserSlice';\r\nimport FlipMove from 'react-flip-move';\r\n \r\nfunction Chat() {\r\n    const [input, setInput] = useState(\"\");\r\n    const chatName = useSelector(selectChatName);\r\n    const chatId = useSelector(selectChatId)\r\n    const [message, setMessage] = useState([]);\r\n    const user = useSelector(selectUser)\r\n    useEffect(() => {\r\n        if(chatId){\r\n        db.collection('chats')\r\n            .doc(chatId)\r\n            .collection('message')\r\n            .orderBy('timestamp','desc')\r\n            .onSnapshot((snapshot) => \r\n                setMessage(snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                }))\r\n                )\r\n            );\r\n        }\r\n    }, [chatId])\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        db.collection('chats').doc(chatId).collection('message').add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message:input,\r\n            uid: user.uid,\r\n            photo: user.photo,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n        })\r\n        setInput(\"\")\r\n    }\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n                <h4>\r\n                    To:<span>{chatName}</span>\r\n                </h4>\r\n                <strong>Details</strong>\r\n            </div>\r\n            <div className=\"chat_message\">\r\n                <FlipMove>\r\n                {message.map(({id,data})=>\r\n                    <Message key={id} contents={data} /> \r\n                )}\r\n                </FlipMove>\r\n            </div>\r\n            <div className=\"chat_input\">\r\n                <form>\r\n                    <input\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        value={input}\r\n                        placeholder=\"iMessage\"\r\n                    />\r\n                    <button onClick={sendMessage}>Send Message</button>\r\n                </form>\r\n                <IconButton >\r\n                    <MicNoneIcon className=\"chat_mic\" />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport './IMessage.css'\r\nfunction IMessage() {\r\n    return (\r\n        <div className=\"iMessage\">\r\n            <Sidebar />\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IMessage\r\n","import React from 'react'\r\nimport {Button} from '@material-ui/core';\r\nimport './Login.css';\r\nimport {auth, provider} from \"./Firebase\";\r\n\r\nfunction Login() {\r\n    const handleLogin =()=>{\r\n        auth.signInWithPopup(provider).catch((err)=> alert(err.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_logo\">\r\n                <img src=\"https://i.pinimg.com/originals/0f/bf/16/0fbf1634d3df83b601b456f3c6aa3c7d.jpg\" alt=\"logo\" />\r\n            </div>\r\n            <h1>iMessage</h1>\r\n            <Button onClick={handleLogin}>SIGN IN</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.css';\r\nimport IMessage from './IMessage';\r\nimport Login from './Login';\r\nimport { selectUser, login, logout } from './features/UserSlice';\r\nimport { auth } from './Firebase';\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        //user is loged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        //logout user\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? <IMessage /> : <Login /> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/UserSlice';\r\nimport chatReducer from '../features/ChatSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}